#!/usr/bin/env python3.4

import sys
import re

def generate_enum(type_list):
    code = \
"""/*
** Code generated by ECSess in c++11
*/

#pragma once

namespace ECSTypes {
\tenum class ComponentsTypes {
"""
    for i, t in enumerate(type_list):
        code += "\t\t" + t + " = " + str(i) + ("," if i < len(type_list) else "") + "\n"
        
    code += "\t};\n}\n"
    return code

def get_derived_classes(files, baseClass):
    classes = []
    for f in files:
        op_file = open(f, "r")
        content = op_file.read()
        content = content.replace('\n', '')
        m = re.findall("class.*?\{.*?\};", content, re.DOTALL)
        for _class in m:
            strs = _class.split()
            for strr in strs:
                if strr == baseClass:
                    classes.append(strs[1])
        op_file.close()
    return classes


def generate_user_components(files, outFile = "ECSTypes.hpp"):
    f = open(outFile, "w")
    f.write(generate_enum(get_derived_classes(files, "titi")))
    f.close()

generate_user_components(sys.argv)
